/*
 * project-model.js
 * Created by: Jake Alsemgeest
 * March 9th, 2016
*/

var Routes = require('./routes-model');

var ProjectModel = function(data) {
	this._data = data;
}

// Constants
var _ControllerInfo = 
        {
            'type': 'folder',
            'name': 'controllers',
            'path': 'controllers',
            'children': [
                {
                    'type': 'file',
                    'name': 'controller.js',
                    'path': 'controllers/controller.js',
                    'contents': ''
                }
            ]
        };
var _ModelsInfo =
        {
            'type': 'folder',
            'name': 'models',
            'path': 'models',
            'children': [
                {
                    'type': 'file',
                    'name': 'model.js',
                    'path': 'models/model.js',
                    'contents': ''
                }
            ]
        };
var _GitIgnoreInfo =
        {
            'type': 'file',
            'name': '.gitignore',
            'path': '.gitignore',
            'contents': '# Logs\nlogs\n*.log\nnpm-debug.log*\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules\njspm_packages\n\n# Optional npm cache directory\n.npm\n\n# Optional REPL history\n.node_repl_history'
        };
var _LicenseInfo =
        {
            'type': 'file',
            'name': 'LICENSE.md',
            'path': 'LICENSE.md',
            'contents': 'The MIT License (MIT)\nCopyright (c) 2016 GitStarted\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'
        };
var _ServerBodyInfo = 'app.use(bodyParser.json()); // support json encoded bodies\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(express.static(__dirname + \'/public\'));\n\nvar server = app.listen(3000, function () {\n\tvar host = server.address().address;\n\tvar port = server.address().port;\n\tconsole.log(\'Example app listening at http://%s:%s\', host, port);\n});';

// Filesystem holder.
ProjectModel.prototype._mainData = [];

// Get the view for index.html.
ProjectModel.prototype._ViewInfo = function(content) {
        return {
            'type': 'folder',
            'name': 'public',
            'path': 'public',
            'children': [
                {
                    'type': 'file',
                    'name': 'index.html',
                    'path': 'views/index.html',
                    'contents': content
                }
            ]
        };
    }

// Get the index.html for public.
ProjectModel.prototype._PublicInfo = function(content) {
        return {
            'type': 'folder',
            'name': 'views',
            'path': 'views',
            'children': [
                {
                    'type': 'file',
                    'name': 'index.html',
                    'path': 'public/index.html',
                    'contents': content
                }
            ]
        };
	}

// Get the Grunt/Gulp file.
ProjectModel.prototype._ManagerInfo = function(manager) {
	var content = '';
	if (manager === 'gulpfile') {
		content = this.GulpInfo();
	}
	else if (manager === 'Gruntfile') {
		content = this.GruntInfo();
	}
	return {
            'type': 'file',
            'name': manager+'.js',
            'path': manager+'.js',
            'contents': content+''
        };
}

// Returns the Gulp File.
ProjectModel.prototype.GulpInfo = function() {
	return '// Dependencies\nvar gulp = require(\'gulp\');\nvar nodemon = require(\'gulp-nodemon\');\nvar notify = require(\'gulp-notify\');\nvar livereload = require(\'gulp-livereload\');\n\n// Task\ngulp.task(\'default\', function() {\n\t// listen for changes\n\tlivereload.listen();\n\t// configure nodemon\n\tnodemon({\n\t\t// the script to run the app\n\t\tscript: \''
		+ this._data.serverName
		+ '\',\n\t\text: \'js\'\n\t}).on(\'restart\', function(){\n\t\t// when the app has restarted, run livereload.\n\t\tgulp.src('
		+ this._data.serverName
		+ ')\n\t\t\t.pipe(livereload())\n\t\t\t.pipe(notify(\'Reloading page, please wait...\'));\n\t})\n})';
}

// Returns the Grunt file.
ProjectModel.prototype.GruntInfo = function() {
	return '';
}
  
// Returns the Server file.  (ex. app.js)      
ProjectModel.prototype._ServerInfo = function(content) {
		console.log(this._data);
	    return {
	            'type': 'file',
	            'name': this._data.serverName+'',
	            'path': this._data.serverName+'',
	            'contents': content
	        };
    }

// Returns the Package.json file.
ProjectModel.prototype._PackageInfo = function() {
        return {
            'type': 'file',
            'name': 'package.json',
            'path': 'package.json',
            'contents': this._PackageInfoContents()
        };
    }

// Returns the README file.
ProjectModel.prototype._ReadMeInfo = function(content) {
        return {
            'type': 'file',
            'name': 'README.md',
            'path': 'README.md',
            'contents': content
        }
    }
// Returns a generated Route HTML File.
ProjectModel.prototype._RouteHTMLInfo = function(routeName) {
		return {
                'type': 'folder',
                'name': 'views',
                'path': 'views',
                'children': [
                    {
                        'type': 'file',
                        'name': routeName+'.html',
                        'path': 'views/'+routeName+'.html',
                        'contents': '<!DOCTYPE html>\n<head>\n<title>'+routeName+'</title>\n</head>\n<body>\n\t<h1>'+routeName+'</h1>\n</body>\n</html>'
                    }
                ]
            };
	}

// Returns a generates Route js file.
ProjectModel.prototype._RouteJSInfo = function(routeName) {
		var routes = new Routes();
		return {
                'type': 'folder',
                'name': 'routes',
                'path': 'routes',
                'children': [
                    {
                        'type': 'file',
                        'name': routeName+'.js',
                        'path': 'routes/'+routeName+'.js',
                        'contents': routes.getRoutesStart() + routeName + routes.getRoutesMiddle() + routeName + '.html' + routes.getRoutesEnd()
                    }
                ]
            };
}
// Returns the package contents.
ProjectModel.prototype._PackageInfoContents = function(){
	console.log(this._data);
	return '{\n\t"name": "' + this._data.gitProjectName 
		+ '",\n\t"version": "0.0.1",\n\t"repository": {\n\t\t"type": "git",\n\t\t"url": "https://github.com/' 
		+ this._data.gitUsername + '/' + this._data.gitProjectName 
		+ '"\n\t},\n\t"scripts": {\n\t\t"start": "node ' + this._data.serverFile
		+ '"\n\t},\n\t"dependencies": {\n ' 
		+ getPackageDependencies(this._data.dependencies) 
		+ '\t},\n\t"license": "MIT"\n}';
}
// Instantiates the filesystem with needed objects.
ProjectModel.prototype.defaultSetup = function() {
	this._mainData.push(_ControllerInfo);
	this._mainData.push(_ModelsInfo);
	this._mainData.push(_GitIgnoreInfo);
	this._mainData.push(_LicenseInfo);
	return;
}
// Returns the 'filesystem'.
ProjectModel.prototype.getProject = function() {
	return this._mainData;
}
// Add a server.
ProjectModel.prototype.addServer = function() {

	var str = '';

	for (var i in this._data.dependencies) {
            str += getRequireStatement(this._data.dependencies[i].name);
    }

    str += '// Creating the Web Server \nvar app = express();\n';

    for (var i in this._data.routes) {
        if (i == 0) {
            str += '// View \n';
        }
        str += getRoutesReferenceStatement(this._data.routes[i].routeName);
    }

    for (var i in this._data.routes) {
    	if (i == 0) {
            str += '// Routes \n';
        }
        str += getRoutesUsageStatement(this._data.routes[i].routeName);
    }

    str += _ServerBodyInfo;

	this._mainData.push(this._ServerInfo(str));
}

// Add a package.
ProjectModel.prototype.addPackage = function() {
	this._mainData.push(this._PackageInfo());
}

// Add a README
ProjectModel.prototype.addReadMe = function(str) {
	this._mainData.push(this._ReadMeInfo(str));
}

// Add a HTML Page
ProjectModel.prototype.addHtmlPage = function(str) {
	this._mainData.push(this._ViewInfo(str));
	this._mainData.push(this._PublicInfo(str));
}

// Add a Manager (ex. gulpfile.js)
ProjectModel.prototype.addManager = function() {
	if (this._data === {}) {
		return;
	}
	console.log(this._data);
	var managerName = this._data.nodeManager === 'gulp' ? 'gulpfile' : this._data.nodeManager === 'grunt' ? 'Gruntfile' : 'manager';
	this._mainData.push(this._ManagerInfo(managerName));
	return;
}

// Add a specific file.
ProjectModel.prototype.addFile = function(data, callback) {
	this._mainData.push(data);
	callback(true);
	return;
}

// Add a route.
ProjectModel.prototype.addRoute = function(routeName) {
	this._mainData.push(this._RouteHTMLInfo(routeName));
	this._mainData.push(this._RouteJSInfo(routeName));
	return;
}

// Helpers
function getRequireStatement(val) {
    var varName = val.replace(/[-|\.][a-z|A-Z]/g, function($1) {
	   return $1.charAt(1).toUpperCase();
    });
    return "var " + varName + " = require('" + val + "');\n";
}

function getRoutesUsageStatement(routeName) {
    var varName = routeName.replace(/[-|\.][a-z|A-Z]/g, function($1) {
       return $1.charAt(1).toUpperCase();
    });
    console.log('app.get(\'/'+routeName+'\', '+varName+');\n');
    return 'app.get(\'/'+routeName+'\', '+varName+');\n';
}

function getPackageDependencies(dependencies) {
    var str = '';
    var expressCheck = false;
    if(dependencies.length > 1) {
        for(var i = 0; i < dependencies.length - 1; i++) {
            if(dependencies[i].name == 'express')
                expressCheck = true;
            str += '\t\t"' + dependencies[i].name + '": "' + dependencies[i].version.replace('v','') + '",\n';
        }
    }
    if(dependencies.length > 0)
        if(dependencies[i].name == 'express')
            expressCheck = true;
        str += '\t\t"' + dependencies[dependencies.length - 1].name + '": "' + dependencies[dependencies.length - 1].version.replace('v','') + '"';
    if(expressCheck == false)
        str += ',\n\t\t"express": "4.13.4"\n';
    else
        str += '\n';
    return str;
}

function getRoutesReferenceStatement(routeName) {
    console.log(routeName);
    var varName = routeName.replace(/[-|\.][a-z|A-Z]/g, function($1) {
       return $1.charAt(1).toUpperCase();
    });
    console.log('var '+ varName +' = require(\'./routes/'+routeName+'.js\');\n');
    return 'var '+ varName +' = require(\'./routes/'+routeName+'.js\');\n';
}


module.exports = ProjectModel;